#!/usr/bin/env python3
"""
Interface utilisateur simplifi√©e pour l'automatisation mensuelle TLDR
Structure r√©organis√©e avec chemins absolus
"""

import subprocess
import sys
import calendar
from datetime import datetime, date
from pathlib import Path

# Ajouter les chemins pour les imports
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


def show_welcome():
    """Affiche l'√©cran d'accueil"""
    print("ü§ñ TLDR Monthly Automation - Interface Simplifi√©e")
    print("=" * 60)
    print("üìÅ Projet organis√© et pr√™t √† l'emploi!")
    print(f"üìÇ Dossier: {project_root}")
    
    # V√©rifier la structure
    required_dirs = ['core', 'automation', 'data/audio_summaries', 'data/json_results']
    missing_dirs = [d for d in required_dirs if not (project_root / d).exists()]
    
    if missing_dirs:
        print(f"‚ö†Ô∏è Dossiers manquants: {missing_dirs}")
        return False
    
    print("‚úÖ Structure v√©rifi√©e et pr√™te")
    return True


def show_menu():
    """Affiche le menu interactif"""
    print("\nüì∞ NEWSLETTERS TLDR DISPONIBLES:")
    newsletters = {
        '1': ('tech', 'Technologie g√©n√©rale'),
        '2': ('ai', 'Intelligence Artificielle'), 
        '3': ('crypto', 'Cryptomonnaies & Web3'),
        '4': ('marketing', 'Marketing digital'),
        '5': ('design', 'Design & UX'),
        '6': ('webdev', 'D√©veloppement Web')
    }
    
    for key, (value, description) in newsletters.items():
        print(f"  {key}. TLDR {value.upper():<10} - {description}")
    
    print("\nüìÖ P√âRIODES POPULAIRES:")
    periods = {
        'a': ('2025', '6', 'Juin 2025 (recommand√©)'),
        'b': ('2025', '5', 'Mai 2025'),
        'c': ('2025', '4', 'Avril 2025'),
        'd': ('custom', 'custom', 'P√©riode personnalis√©e')
    }
    
    for key, (year, month, description) in periods.items():
        print(f"  {key}. {description}")
    
    return newsletters, periods


def get_user_choices():
    """R√©cup√®re les choix de l'utilisateur"""
    newsletters, periods = show_menu()
    
    # Choix de la newsletter
    print(f"\nüéØ Choisissez la newsletter (1-{len(newsletters)}):")
    while True:
        try:
            choice = input("Newsletter> ").strip()
            if choice in newsletters:
                newsletter_type, newsletter_desc = newsletters[choice]
                print(f"‚úÖ S√©lectionn√©: TLDR {newsletter_type.upper()} - {newsletter_desc}")
                break
            else:
                print(f"‚ùå Choix invalide. Entrez un nombre entre 1 et {len(newsletters)}")
        except KeyboardInterrupt:
            print("\nüëã Au revoir!")
            sys.exit(0)
    
    # Choix de la p√©riode
    print(f"\nüìÖ Choisissez la p√©riode:")
    while True:
        try:
            choice = input("P√©riode> ").strip().lower()
            if choice in periods:
                year_str, month_str, period_desc = periods[choice]
                if year_str == 'custom':
                    year, month = get_custom_period()
                else:
                    year, month = int(year_str), int(month_str)
                print(f"‚úÖ S√©lectionn√©: {period_desc}")
                break
            else:
                print(f"‚ùå Choix invalide. Entrez a, b, c ou d")
        except KeyboardInterrupt:
            print("\nüëã Au revoir!")
            sys.exit(0)
    
    return newsletter_type, year, month


def get_custom_period():
    """R√©cup√®re une p√©riode personnalis√©e"""
    # Ann√©e
    current_year = datetime.now().year
    print(f"\nüìÖ Ann√©e (d√©faut: {current_year}):")
    year_input = input(f"Ann√©e [{current_year}]> ").strip()
    year = int(year_input) if year_input else current_year
    
    # Mois
    current_month = datetime.now().month
    print(f"\nüìÖ Mois (1-12, d√©faut: {current_month}):")
    
    # Afficher les mois
    for i in range(1, 13):
        month_name = calendar.month_name[i]
        print(f"  {i:2d}. {month_name}")
    
    month_input = input(f"\nMois [{current_month}]> ").strip()
    month = int(month_input) if month_input else current_month
    
    return year, month


def show_month_preview(newsletter_type: str, year: int, month: int):
    """Affiche un aper√ßu du mois √† traiter"""
    month_name = calendar.month_name[month]
    
    print(f"\nüìä APER√áU - TLDR {newsletter_type.upper()} {month_name} {year}")
    print("-" * 50)
    
    # Calculer les jours ouvrables approximatifs (sans jours f√©ri√©s pour simplifier)
    cal = calendar.monthcalendar(year, month)
    business_days = 0
    weekends = 0
    
    for week in cal:
        for day in week:
            if day != 0:  # Jour valide
                weekday = date(year, month, day).weekday()
                if weekday < 5:  # Lundi=0 √† Vendredi=4
                    business_days += 1
                else:
                    weekends += 1
    
    total_days = business_days + weekends
    
    print(f"üìÖ Jours total: {total_days}")
    print(f"üíº Jours ouvrables (approx): {business_days}")
    print(f"üèñÔ∏è Week-ends: {weekends}")
    print(f"üéµ Fichiers audio √† g√©n√©rer: ~{business_days}")
    
    # Estimation du temps
    estimated_minutes = business_days * 0.5  # 30s par jour en moyenne
    print(f"‚è±Ô∏è Temps estim√©: ~{estimated_minutes:.1f} minutes")
    
    # Dossiers de sortie
    audio_dir = project_root / 'data' / 'audio_summaries'
    json_dir = project_root / 'data' / 'json_results'
    
    print(f"\nüìÅ Fichiers g√©n√©r√©s dans:")
    print(f"   üéµ Audio: {audio_dir}")
    print(f"   üìä JSON:  {json_dir}")


def check_prerequisites():
    """V√©rifie les pr√©requis avant lancement - VERSION CORRIG√âE"""
    print("\nüîç V√âRIFICATION DES PR√âREQUIS:")
    print("-" * 40)
    
    all_good = True
    
    # V√©rifier Ollama
    try:
        import ollama
        print("‚úÖ Module Ollama install√©")
        
        # Test de connexion
        try:
            ollama.list()
            print("‚úÖ Ollama connect√© et op√©rationnel")
        except Exception as e:
            print(f"‚ùå Ollama non connect√©: {e}")
            print("   üí° Solution: Lancez 'ollama serve' dans un autre terminal")
            all_good = False
    except ImportError:
        print("‚ùå Module Ollama manquant")
        print("   üí° Solution: pip install ollama")
        all_good = False
    
    # V√©rifier les autres modules avec les bons noms d'import
    required_modules = [
        ('requests', 'requests', 'pip install requests'),
        ('bs4', 'beautifulsoup4', 'pip install beautifulsoup4'),  # Le module s'importe comme 'bs4'
        ('pyttsx3', 'pyttsx3', 'pip install pyttsx3'),
        ('dateutil', 'python-dateutil', 'pip install python-dateutil')
    ]
    
    for import_name, package_name, install_cmd in required_modules:
        try:
            __import__(import_name)
            print(f"‚úÖ {package_name} install√©")
        except ImportError:
            print(f"‚ùå {package_name} manquant")
            print(f"   üí° Solution: {install_cmd}")
            all_good = False
    
    # V√©rifier l'espace disque
    try:
        import shutil
        free_space = shutil.disk_usage(project_root).free / (1024**3)  # GB
        if free_space > 1.0:
            print(f"‚úÖ Espace disque: {free_space:.1f} GB disponible")
        else:
            print(f"‚ö†Ô∏è Espace disque faible: {free_space:.1f} GB")
    except:
        print("‚ö†Ô∏è Impossible de v√©rifier l'espace disque")
    
    return all_good


def run_automation(newsletter_type: str, year: int, month: int):
    """Lance l'automatisation"""
    print(f"\nüöÄ LANCEMENT DE L'AUTOMATISATION")
    print(f"üì∞ Newsletter: TLDR {newsletter_type.upper()}")
    print(f"üìÖ P√©riode: {calendar.month_name[month]} {year}")
    print("-" * 50)
    
    # Chemin vers le script d'automatisation
    automation_script = project_root / 'automation' / 'monthly_automation.py'
    
    if not automation_script.exists():
        print(f"‚ùå Script d'automatisation non trouv√©: {automation_script}")
        return False
    
    # Commande √† ex√©cuter
    cmd = [
        sys.executable,  # Python executable
        str(automation_script),
        str(year),
        str(month),
        newsletter_type
    ]
    
    print(f"üíª Commande: {' '.join(cmd[1:])}")  # Masquer le chemin Python complet
    print(f"üìÅ Logs: data/logs/monthly_automation.log")
    print("\n‚ö° D√©marrage...")
    
    try:
        # Lancement avec affichage en temps r√©el
        process = subprocess.Popen(
            cmd, 
            stdout=subprocess.PIPE, 
            stderr=subprocess.STDOUT,
            universal_newlines=True,
            bufsize=1,
            cwd=str(project_root)  # D√©finir le dossier de travail
        )
        
        # Affichage en temps r√©el
        for line in process.stdout:
            print(line, end='')
        
        # Attendre la fin
        return_code = process.wait()
        
        if return_code == 0:
            print(f"\n‚úÖ AUTOMATISATION TERMIN√âE AVEC SUCC√àS!")
            
            # Afficher les r√©sultats
            audio_dir = project_root / 'data' / 'audio_summaries'
            json_dir = project_root / 'data' / 'json_results'
            
            # Compter les fichiers g√©n√©r√©s
            audio_files = list(audio_dir.glob(f"tldr_{newsletter_type}_*.wav"))
            json_files = list(json_dir.glob(f"tldr_{newsletter_type}_*.json"))
            
            print(f"üéµ {len(audio_files)} fichiers audio dans: {audio_dir}")
            print(f"üìä {len(json_files)} fichiers JSON dans: {json_dir}")
            
            # Afficher quelques exemples
            if audio_files:
                print(f"\nüéµ Exemples de fichiers audio:")
                for audio_file in sorted(audio_files)[-3:]:  # 3 derniers fichiers
                    print(f"   üéµ {audio_file.name}")
        else:
            print(f"\n‚ùå ERREUR - Code de retour: {return_code}")
            print(f"üìã Consultez les logs pour plus de d√©tails")
        
        return return_code == 0
        
    except KeyboardInterrupt:
        print(f"\nüõë ARR√äT DEMAND√â PAR L'UTILISATEUR")
        try:
            process.terminate()
        except:
            pass
        return False
    except Exception as e:
        print(f"\n‚ùå ERREUR LORS DU LANCEMENT: {e}")
        return False


def quick_modes():
    """Modes rapides pr√©d√©finies"""
    print("\n‚ö° MODES RAPIDES:")
    quick_options = {
        '1': ('tech', 2025, 6, 'TLDR Tech - Juin 2025 (recommand√©)'),
        '2': ('ai', 2025, 6, 'TLDR AI - Juin 2025'),
        '3': ('tech', datetime.now().year, datetime.now().month, 'TLDR Tech - Mois courant'),
        '4': ('custom', 'custom', 'custom', 'Mode personnalis√©')
    }
    
    for key, (newsletter, year, month, description) in quick_options.items():
        print(f"  {key}. {description}")
    
    choice = input("\nMode rapide (1-4)> ").strip()
    
    if choice in quick_options:
        newsletter, year, month, _ = quick_options[choice]
        if newsletter == 'custom':
            return get_user_choices()
        else:
            return newsletter, year, month
    else:
        print("‚ùå Choix invalide, mode personnalis√©...")
        return get_user_choices()


def show_existing_results():
    """Affiche les r√©sultats existants"""
    audio_dir = project_root / 'data' / 'audio_summaries'
    json_dir = project_root / 'data' / 'json_results'
    
    audio_files = list(audio_dir.glob("*.wav")) if audio_dir.exists() else []
    json_files = list(json_dir.glob("*.json")) if json_dir.exists() else []
    
    if audio_files or json_files:
        print("\nüìä R√âSULTATS EXISTANTS:")
        print("-" * 30)
        
        if audio_files:
            print(f"üéµ {len(audio_files)} fichiers audio trouv√©s:")
            for audio_file in sorted(audio_files)[-5:]:  # 5 derniers
                file_size = audio_file.stat().st_size / 1024  # KB
                print(f"   üéµ {audio_file.name} ({file_size:.1f} KB)")
        
        if json_files:
            print(f"\nüìä {len(json_files)} fichiers JSON trouv√©s:")
            for json_file in sorted(json_files)[-5:]:  # 5 derniers
                print(f"   üìä {json_file.name}")
        
        # R√©sum√©s mensuels
        monthly_files = list(json_dir.glob("*monthly*.json")) if json_dir.exists() else []
        if monthly_files:
            print(f"\nüìà {len(monthly_files)} r√©sum√©s mensuels:")
            for monthly_file in sorted(monthly_files):
                print(f"   üìà {monthly_file.name}")
    else:
        print("\nüìä Aucun r√©sultat existant trouv√©")
        print("   üí° Lancez une automatisation pour g√©n√©rer du contenu!")


def main():
    """Fonction principale"""
    try:
        # √âcran d'accueil
        if not show_welcome():
            print("‚ùå Impossible de continuer - structure incompl√®te")
            return
        
        # Afficher les r√©sultats existants
        show_existing_results()
        
        # V√©rifications pr√©liminaires
        if not check_prerequisites():
            print(f"\n‚ùå Pr√©requis manquants - r√©solvez les probl√®mes ci-dessus")
            print(f"üí° Pour continuer malgr√© tout, tapez 'force'")
            
            user_input = input("\nContinuer? (force/N)> ").strip().lower()
            if user_input != 'force':
                print("üëã Installation des pr√©requis recommand√©e avant utilisation")
                return
        
        print("\n" + "="*60)
        
        # Choix de la configuration
        newsletter, year, month = quick_modes()
        
        # Aper√ßu
        show_month_preview(newsletter, year, month)
        
        # Confirmation finale
        month_name = calendar.month_name[month]
        print(f"\n‚ùì Lancer l'automatisation TLDR {newsletter.upper()} pour {month_name} {year}?")
        print(f"‚ö†Ô∏è Cette op√©ration peut prendre 20-40 minutes selon le mois")
        
        confirm = input("Continuer? (o/N)> ").strip().lower()
        
        if confirm in ['o', 'oui', 'y', 'yes']:
            print(f"\nüé¨ C'est parti!")
            success = run_automation(newsletter, year, month)
            
            if success:
                print(f"\nüéâ MISSION ACCOMPLIE!")
                print(f"üéµ Vos r√©sum√©s audio TLDR {newsletter.upper()} sont pr√™ts!")
                print(f"üìÅ Consultez le dossier: data/audio_summaries/")
                
                # Proposer d'ouvrir le dossier
                try:
                    import os
                    audio_dir = project_root / 'data' / 'audio_summaries'
                    print(f"\nüí° Ouvrir le dossier des r√©sultats?")
                    open_folder = input("Ouvrir? (o/N)> ").strip().lower()
                    
                    if open_folder in ['o', 'oui', 'y', 'yes']:
                        if os.name == 'nt':  # Windows
                            os.startfile(str(audio_dir))
                        elif os.name == 'posix':  # macOS/Linux
                            os.system(f'open "{audio_dir}"' if sys.platform == 'darwin' else f'xdg-open "{audio_dir}"')
                except Exception as e:
                    print(f"‚ö†Ô∏è Impossible d'ouvrir le dossier automatiquement: {e}")
            else:
                print(f"\nüòû Il y a eu des probl√®mes...")
                print(f"üìã Consultez les logs: data/logs/monthly_automation.log")
        else:
            print("\nüëã Automatisation annul√©e")
    
    except KeyboardInterrupt:
        print(f"\nüëã Au revoir!")
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()